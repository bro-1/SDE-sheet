https://leetcode.com/problems/sort-colors/

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0;
        int mid=0;
        int hi=nums.size()-1;
        for(int i=0;i<nums.size();i++){
          if(nums[mid]==0){
            swap(nums[low],nums[mid]);
            low++;
            mid++;
        }
        else if(nums[mid]==1){
            mid++;
        }
        else if(nums[mid]==2){
            swap(nums[mid],nums[hi]);
            hi--;
        }   
        }
    }
};


Another way (with while loop):
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0,mid=0;
        int high=nums.size()-1;
        while(mid<=high){//because we should have 1s till mid -1
            if(nums[mid]==0){
                swap(nums[mid],nums[low]);
                low++;
                mid++;
            }
            else if(nums[mid]==1){
                mid++;
            }
            else{
                swap(nums[high],nums[mid]);
                high--;
            }
        }
    }
};

Using switch case:
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int lo=0,mid=0;
        int hi=nums.size()-1;
        while(mid<=hi){
            switch(nums[mid]){
                case 0:
                    {
                        swap(nums[mid],nums[lo]);
                        lo++;
                        mid++;
                        break;
                    }
                case 1:
                    {
                        mid++;
                        break;
                    }
                case 2:
                    {
                        swap(nums[mid],nums[hi]);
                        hi--;
                        break;
                    }
            }
        }
    }
};

