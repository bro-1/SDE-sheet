https://leetcode.com/problems/house-robber/



Code:
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        if(nums.size()==2) return max(nums[0],nums[1]);
        int dp[nums.size()];
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<nums.size();i++){
            dp[i]=max(nums[i]+dp[i-2],dp[i-1]);//taking the first and third or the second one... whichever is maximum
        }
        return dp[nums.size()-1];
    }
};


Another approach without using dp array:

class Solution {
public:
    int rob(vector<int>& nums) {
        int rob1=0,rob2=0;
        int newRob=0;
        for(int i=0;i<nums.size();i++){
            newRob=max(rob1+nums[i],rob2);
            rob1=rob2;
            rob2=newRob;
        }
        return rob2;
    }
};
