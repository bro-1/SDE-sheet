https://leetcode.com/problems/binary-tree-maximum-path-sum/
 for every node return its max path without splitting twice (can go in one direction)
 also keep a track of every node's max path (with splitting) and keep updating the maximum maxpath in result
 also while computing max path without splitting : take max of (left, right, 0) to eliminate negative numbers
 TC: O(n)
 SC: O(log n)
 
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int res = root->val;
        dfs(root, res);
        return res;
    }
            //max path sum without split
        int dfs(TreeNode* root, int &res){
            if(root==NULL) return 0;
            int leftpath= max(0, dfs(root->left, res));
            int rightpath = max(0, dfs(root-> right, res));
            //compute max path with a split
            res = max(res, root->val + leftpath + rightpath);
            return root->val + max(leftpath, rightpath);
        }
    
};
