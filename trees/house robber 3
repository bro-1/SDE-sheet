
https://leetcode.com/problems/house-robber-iii/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        pair<int,int> ans=dfs(root);
        return max(ans.first,ans.second);
    }
    pair<int,int> dfs (TreeNode* root){
        if(root==NULL) return make_pair(0,0);
        pair<int,int> leftvalue= dfs(root->left);
        pair<int,int> rightvalue= dfs(root->right);
        int withRoot= root->val+leftvalue.second+rightvalue.second;
        int withoutRoot= max(leftvalue.first,leftvalue.second)+max(rightvalue.first,rightvalue.second);//because we can include the child here or not include it based on whichever option gives us the maximum robbery
        return make_pair(withRoot,withoutRoot);
    }
};
