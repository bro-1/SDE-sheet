


recursive:
TC: O(n)


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL) return true;
       else if(p==NULL || q==NULL) return false;
        else if(p->val!=q->val) return false;
        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
    }
};

iterative:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        Stack<TreeNode *> stp;
        Stack<TreeNode *> stq;
        if(p==NULL &&q==NULL) return true;
        if(p!=NULL && q!=NULL) {
            stp.push(p->val);
            stq.push(q->val);
        }
        while(!stp.empty() && !stq.empty()){
            TreeNode* pnew=stp.pop();
            TreeNode* qnew=stq.pop();
            if(pnew->val!=qnew->val) return false;
            if(pnew->right!=NULL) stp.push(pnew->right);
            if(qnew->right!=NULL) stq.push(qnew->right);
            if(pnew->left!=NULL) stp.push(pnew->left);
            if(qnew->right!=NULL) stq.push(qnew->left);
            if(stp.size()!=stq.size()) return false;
        }
        return stp.size()==stq.size();
    }
};
