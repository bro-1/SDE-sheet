https://leetcode.com/problems/two-sum/

Brute force:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                if(nums[i]+nums[j]==target){
                    ans.push_back(i);
                    ans.push_back(j);
                }
            }
        }
        return ans;
}};
TC: O(n^2)

Hashing solution:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int, int> mp;
        for(int i=0;i<nums.size();i++){
            if(mp.find(target-nums[i])!=mp.end())//if the target sum exists then it will never point to the map's end
               {
             ans.push_back(mp[target-nums[i]]);//getting the index of the remaining element from map
             ans.push_back(i);//index of the current element
            }
             mp[nums[i]]=i;//if condition not satisfied, store the value along with its index
        }
        return ans;
}};TC: O(n)
