Approach1: use a ds and mark whichever you have picked and recur on the rest

TC: n*n!
SC= O(n)+O(n)
auxiliary space: O(n)

class Solution {
private:
    void recurPermute(vector<int>&ds, vector<int> &nums, vector<vector<int>>&ans,int freq[]){
        if(ds.size()==nums.size()){
            ans.push_back(ds);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(freq[i]==0){
                ds.push_back(nums[i]);
                freq[i]=1;
                recurPermute(ds,nums,ans,freq);
                freq[i]=0;
                ds.pop_back();
            }
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
       vector<vector<int>> ans;
        vector<int> ds;
        int freq[nums.size()];
        for(int i=0;i<nums.size();i++){
            freq[i]=0;
        }
        recurPermute(ds,nums,ans,freq);
        return ans;
    }
};



TC: O(n!*n)
SC: O(n!)

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int n=nums.size();
        helper(0,n-1,nums,ans);
        return ans;
    }
    void helper (int l, int r, vector<int>&arr, vector<vector<int>>& ans){
        if(l==r){
            ans.push_back(arr);
            return;
        }
        for(int i=l;i<=r;i++){
            swap(arr[l],arr[i]);
            helper(l+1,r,arr,ans);
            swap(arr[i],arr[l]);
        }
    }
};
